#下面是撰写Gameconcept, tdd, gdd,和art bible的参考。请按以下内容写相关文档。


GDD:
# **《武松：血溅鸳鸯楼》游戏设计文档 (v1.0)**

## **一、 项目愿景与核心目标**

- **项目名称:** 武松：血溅鸳鸯楼 (暂定)
- **游戏类型:** 2D横版、叙事驱动、潜行解谜
- **核心体验:** 让玩家**亲身扮演**水浒传中的武松，以**极度忠于原著**的方式，经历从潜入张都监府到复仇成功的整个夜晚。体验其隐忍、果决、狠辣的行事风格。
- **艺术风格:** 手绘半写实风格，利用Unity URP 2D光照系统营造阴暗、压抑、最终爆发的夜晚复仇氛围。
- **目标平台:** PC (后续可考虑移植)
- **开发周期:** 2个月 (1个月Alpha， 2个月Beta测试版)
- **核心原则:** 玩法服务于叙事，机制还原原著。**不做复杂系统，只做必要交互。**

---

## **二、 核心玩法机制**

游戏围绕三大核心互动机制展开：

1. **光影隐匿系统:**
    - **描述:** 武松需隐藏在阴影中规避守卫视野。URP 2D灯光定义“光亮”区域，未被照到即为“阴影”。
    - **玩家反馈:** 武松Sprite在阴影中颜色变深，屏幕边缘出现隐匿UI提示。
    - **AI关联:** 守卫视野与其携带的光源（灯笼、火把）绑定。
2. **观察与聆听系统:**
    - **描述:** 在特定区域（Trigger），武松静止不动可偷听NPC对话，获取关键情报（如目标位置、敌人状态）。
    - **UI表现:** 台词以字幕形式显示于屏幕下方，并自动记录于“情报日志”。
    - **高级应用:** 在鸳鸯楼胡梯口，聆听是解锁后续剧情的关键谜题。
3. **环境互动系统:**
    - **描述:** 与场景中的关键物品进行上下文交互，推动剧情发展。所有交互简单直接（靠近按空格）。
    - **关键交互:**
        - **推门:** 制造声响，吸引门内NPC。
        - **拖拽尸体:** 隐藏痕迹，避免被发现。
        - **更换衣物:** 获取伪装，改变NPC对玩家的反应。
        - **熄灭灯火:** 制造黑暗区域，便于潜行。
        - **题字:** 游戏终局的仪式性交互。

---

## **三、 关卡流程设计 (极度还原原著)**

### **关卡一: 夜潜张府 (马院)**

- **目标:** 潜入后槽房间，换装并获取情报。
- **流程:**
    1. **观察:** 潜伏于马院阴影，观察后槽例行公事（喂马、挂灯、睡觉）。
    2. **互动-惊敌:** 后槽睡下后，前往其屋门进行两次“推门”交互，激怒他出门查看。
    3. **QTE处决:** 门开瞬间，完成简单QTE，制服后槽。
    4. **逼问:** 通过对话树选择问话，获取“目标在鸳鸯楼”的情报。
    5. **清扫:** 执行“吹灯”、“换装”、“藏尸”一系列操作后，方可离开。

### **关卡二: 厨房杀诫**

- **目标:** 听清情报后，迅速无声地解决两个丫鬟。
- **流程:**
    1. **聆听:** 于窗外阴影处静止，完整听完丫鬟对话，获知“楼上人已醉”的关键信息。
    2. **决断:** 推门而入，游戏进入慢动作。
    3. **快速处决:** 在限定时间内，用鼠标快速点击两个目标，完成双杀。超时或失败将引发额外混乱。
    4. **清扫:** “拖尸”、“灭灶火”后离开。

### **关卡三: 鸳鸯楼听密**

- **目标:** 摸上楼，听清所有对话，点燃怒火。
- **流程:**
    1. **潜行:** 利用光影，按节奏走上楼梯，避开月光。
    2. **听力解谜:** 在胡梯口，通过微调位置（左右移动）使楼上对话逐渐清晰。收集全部5条关键罪证。
    3. **怒火爆发:** 情报集齐瞬间，屏幕特效与音效达到顶峰，按下【复仇！！！】键，剧情推向高潮。

### **终局: 血溅鸳鸯楼**

- **目标:** 手刃仇人，留名离去。
- **流程:**
    1. **风暴开场:** 冲入房间，对第一目标蒋门神执行**剧情QTE处决**。
    2. **顺序抉择:** 玩家自主选择下一个目标。
        - **正确顺序 (张都监 -> 张团练):** 触发流畅处决动画。
        - **错误顺序:** 与张都监进入短暂搏斗，增加难度作为惩罚。
    3. **仪式收尾:** 走到墙边，通过“题字”小游戏写下“杀人者打虎武松也”。
    4. **离去:** 从窗台跳下，融入月色，游戏结束。

---

## **四、 技术实现方案 (极简主义)**

1. **光影检测:** 使用`Light2D.GetIntensityAt()`方法检测武松位置光照强度，低于阈值即判定为隐匿。 (简单高效)
2. **NPC AI:** 采用**有限状态机(FSM)** 而非复杂行为树。状态包括：巡逻(Patrol)、调查(Investigate)、追击(Chase)、死亡(Dead)。
3. **脚本化序列:** 对于后槽等有固定流程的NPC，使用**协程(Coroutine)** 控制其移动和行为，按时间线触发事件。
4. **QTE系统:** 在需要时激活UI提示按键。结果仅为**播放不同动画**（成功处决动画/失败搏斗动画）。
5. **音频管理:** 为不同区域设置`Audio Trigger`，玩家进入时播放对应环境音或对话。

---

## **五、 开发里程碑与时间表**

| **时间** | **阶段** | **目标** |
| --- | --- | --- |
| **第1-2周** | **核心原型** | 完成玩家移动、基础光影检测、后槽脚本化序列、基础交互（推门）。 |
| **第3-4周** | **Alpha版本** | **完成“马院”关卡全部内容**。集成最终手绘美术、音效。实现从潜入到换装离开的完整闭环。可玩、无致命BUG。 |
| **第5-6周** | **系统扩展** | 搭建厨房、鸳鸯楼场景白盒。实现聆听系统、处决QTE、怒火积累UI。 |
| **第7-8周** | **Beta版本** | **集成所有最终美术和音效**。连接所有关卡，实现题字功能。进行封闭测试，收集反馈，进行最终打磨。 |

---

## **六、 风险与应对策略**

- **风险:** 过度追求还原度导致开发复杂度飙升。
- **策略:** **严格遵循“极简实现”方案**。用脚本动画、UI提示和玩家的想象力来“暗示”复杂逻辑，而非真正实现它。
- **风险:** 玩家卡关，不理解谜题逻辑。
- **策略:** 加入适当的**环境提示**（如后槽的灯笼光照范围可视化）和**武松的内心独白文字**进行引导。


TDD:
# **《武松：血溅鸳鸯楼》技术设计文档 (TDD v1.0)**

## **一、 开发环境**

- **引擎:** Unity 6000 (应使用受支持的LTS版本，如 2022.3.x LTS)
- **渲染管线:** Universal RP (URP) 2D
- **IDE:** Visual Studio 2022
- **版本控制:** Git (强烈推荐)
- **目标平台:** PC Standalone

## **二、 项目设置与目录结构**

### **1. 初始设置**

1. 创建新的3D项目（稍后启用2D功能）。
2. 通过Package Manager安装 `Universal RP` 包。
3. 在项目根目录创建 `Assets/Art/RenderPipeline` 文件夹。
4. 右键创建 `Universal Render Pipeline > Pipeline Asset (Forward Renderer)`。在Project Settings > Graphics 中将其设为默认。
5. 在 `Project Settings > Editor` 中，将 `Version Control` 模式设置为 `Visible Meta Files`，并将 `Asset Serialization` 模式设置为 `Force Text`。

### **2. 推荐目录结构 (`Assets/` 下)**

text

```
      # 我们游戏的所有代码和资源
│       ├── _Scripts/
│       │   ├── Core/
│       │   ├── Characters/
│       │   │   ├── Player/
│       │   │   └── NPC/
│       │   ├── Gameplay/
│       │   ├── Interaction/
│       │   ├── UI/
│       │   └── Utilities/
│       ├── Resources/
│       │   ├── Sprites/
│       │   ├── Backgrounds/
│       │   ├── Lighting/
│       │   └── Prefabs/
│       ├── Audio/
│       ├── Scenes/
│       │   ├── Core/
│       │   └── Levels/
│       ├── Settings/
│       └── Prefabs/

```

**说明:** 使用 `[MyCompany]` 和 `[GameName]` 命名空间可以极大避免与其他插件发生冲突。

## **三、 核心系统设计与脚本规划**

### **1. 管理器 (Managers) - 使用单例模式**

- **`GameManager.cs`** (核心总控)
    - 职责: 游戏状态管理（如游戏开始、暂停、结束）、场景加载、全局事件分发。
    - 关键属性: `public static GameManager Instance;`
- **`UIManager.cs`** (UI管理)
    - 职责: 控制所有UI面板的显示与隐藏（如对话字幕、情报日志、交互提示、QTE提示）。
    - 关键方法: `ShowSubtitle(string text)`, `HideSubtitle()`, `ShowInteractionPrompt(string promptText)`, `HideInteractionPrompt()`.
- **`AudioManager.cs`** (音频管理)
    - 职责: 播放背景音乐、环境音和音效。
    - 关键方法: `PlaySFX(AudioClip clip)`, `PlayBGM(AudioClip clip)`.

### **2. 玩家角色 (Player)**

- **`PlayerController.cs`** (核心控制)
    - 职责: 处理玩家输入（移动、跳跃、交互）、控制动画状态机。
    - 继承自 `MonoBehaviour`。
    - 关键引用: `Rigidbody2D`, `BoxCollider2D`, `Animator`, `PlayerInteraction`.
- **`PlayerStealth.cs`** (隐匿系统)
    - 职责: 检测所处环境的光照强度，判断是否隐匿。
    - 关键方法: `bool CheckIfInShadow()`。通过 `Light2D` 的 `GetIntensity` 相关API实现。
    - 关键事件: `public static event Action<bool> OnStealthStatusChanged;` (当隐匿状态改变时触发，其他脚本可订阅)。
- **`PlayerInteraction.cs`** (交互系统)
    - 职责: 检测面前的可交互物体（使用 `Raycast` 或 `OverlapCircle`），处理交互输入。
    - 关键方法: `Interactable FindNearestInteractable()`, `void PerformInteraction()`.

### **3. NPC系统**

- **`NPC_Controller.cs`** (基类)
    - 职责: NPC的通用状态机基础。
    - 关键枚举: `public enum NPCState { Idle, Patrol, Investigate, Chase, Dead }`
    - 关键方法: `void ChangeState(NPCState newState)`.
- **`NPC_Guard.cs`** (派生类：守卫)
    - 职责: 实现巡逻、调查、追击玩家的具体逻辑。
    - 关键属性: `public Transform[] patrolPoints;`
- **`NPC_Scripted.cs`** (派生类：脚本化NPC，如后槽)
    - 职责: 执行预设的脚本序列（例如：走到A点 -> 等待 -> 走到B点 -> 播放动画）。
    - 关键方法: 使用 `IEnumerator` 协程编写序列，如 `IEnumerator Routine_AfterBedtime()`.

### **4. 交互系统**

- **`Interactable.cs`** (抽象基类)
    - 所有可交互物体的基类。包含一个 `public virtual void Interact()` 方法。
- **`Interactable_Door.cs`** (派生类：门)
    - 重写 `Interact()` 方法，播放开门动画/音效，并可能触发事件（如惊动后槽）。
- **`Interactable_Draggable.cs`** (派生类：可拖拽物体，如尸体)
    - 重写 `Interact()`，当玩家交互时，将物体设为玩家的子物体，并跟随玩家移动。再次交互放下。
- **`Interactable_Item.cs`** (派生类：道具，如衣服、石头)
    - 重写 `Interact()`，将道具添加到玩家库存或直接使用。

### **5. 监听与触发器**

- **`ListenTrigger.cs`** (监听区域)
    - 职责: 当玩家进入`Trigger`并保持隐匿和静止时，触发对话。
    - 关键属性: `public string[] dialogueLines;` (在Inspector中填写台词)。
    - 逻辑: 在 `OnTriggerStay2D` 中检测玩家是否静止，然后调用 `UIManager.Instance.ShowSubtitle(...)`。

## **四、 关键实现代码示例 (伪代码/思路)**

### **1. 光影检测 (`PlayerStealth.cs`)**

csharp

```
public class PlayerStealth : MonoBehaviour{
    public Light2D globalLight;// 主光源（月光）public float hideThreshold = 0.1f;
    private bool isHidden = false;

    void Update()
    {
        float intensity = globalLight.GetIntensity(transform.position);// 需要自定义扩展方法或使用Light2D.color// 简化：如果URP无法直接获取某点强度，可在玩家头顶放一个小的LightSensor对象，检测照射它的光强bool newHideState = intensity < hideThreshold;

        if (newHideState != isHidden)
        {
            isHidden = newHideState;
            OnStealthStatusChanged?.Invoke(isHidden);// 通知其他系统// 例如：改变玩家Sprite颜色GetComponent<SpriteRenderer>().color = isHidden ? Color.gray : Color.white;
        }
    }
}
```

### **2. 简单状态机 (`NPC_Controller.cs`)**

csharp

```
public class NPC_Controller : MonoBehaviour{
    public NPCState currentState;

    protected virtual void Update()
    {
        switch (currentState)
        {
            case NPCState.Patrol:
                UpdatePatrolState();
                break;
            case NPCState.Investigate:
                UpdateInvestigateState();
                break;
// ... 其他状态}
    }

    protected virtual void UpdatePatrolState()
    {
// 巡逻逻辑}

    public void ChangeState(NPCState newState)
    {
// 退出当前状态逻辑OnExitState(currentState);
        currentState = newState;
// 进入新状态逻辑OnEnterState(newState);
    }

    protected virtual void OnEnterState(NPCState state) { }
    protected virtual void OnExitState(NPCState state) { }
}
```

## **五、 给“AI程序员”的指令**

1. **创建项目并设置URP。**
2. **按照目录结构创建文件夹。**
3. **从核心管理器开始编写脚本:** 先创建 `GameManager`, `UIManager` 的单例框架。
4. **实现玩家基础功能:** `PlayerController` (移动), `PlayerInteraction` (检测交互物)。
5. **实现隐匿系统:** `PlayerStealth`。这是项目的技术难点，优先攻克。
6. **实现NPC系统:** 先做基础的 `NPC_Controller` 状态机，再做 `NPC_Guard`。
7. **实现交互系统:** 创建 `Interactable` 基类，然后实现门、尸体等派生类。
8. **最后实现脚本化序列和QTE:** 这些是建立在基础系统之上的具体游戏逻辑。

**重要提示:** 在开发每个功能时，**优先考虑数据驱动**。将需要在Inspector中调整的参数（如移动速度、光照阈值、巡逻点）设为`public`变量，方便你后续调试和平衡。



GameConcept:
### **核心玩法重塑：基于原著的“观察-等待-互动”链条**

我们将用一套更复杂、更还原的“**环境互动与时机把握**”玩法取代“投石引敌”。核心循环是：**观察环境 -> 理解NPC行为模式 -> 在正确的时间点进行交互**。

### **关卡1：马院杀后槽 - 详细玩法分解**

根据你提供的原文，我们将这个过程设计成一个完整的解谜关卡。

**场景构成：**

- **横版视角：** 左侧是马院入口（角门），中间是马厩和草料堆，右侧是后槽的小屋。小屋有门和一扇小窗。
- **光源：** 后槽手提的灯笼（移动光源）、小屋内桌上的油灯（固定光源）、微弱的月光（环境光）。
- **关键物品：** 草料、灯笼（可交互）、屋门（可交互）、油灯（可交互）、后槽的衣裳和床（触发器）。
- **NPC：** 后槽。他有严格的行为树（Scripted Routine），完全模仿原文。

**玩家目标：** 潜入小屋，杀掉后槽，换装并获取情报。

**分步玩法设计：**

1. **初始潜伏 (观察阶段)**
    - 游戏开始，武松伏在马院墙边的**阴影**中。
    - **呀地一声**，角门打开，后槽提**灯笼**出场。玩家必须立刻操作武松移动到最近的阴影（如草料堆后），**灯笼的光照范围会清晰可见**，一旦照到武松即失败。
    - 后槽开始执行固定 routine：**上草料 -> 挂起灯笼 -> 铺床 -> 脱衣 -> 上床睡觉**。
    - **玩法：** 玩家在此期间只能观察，不能行动。这是一个强制性的观察阶段，让玩家**学习并记住后槽的完整行为模式**。当他吹灭灯笼上床后，主要光源消失，场景变暗，仅剩月光和小屋窗户透出的微弱灯光。
2. **惊敌出门 (互动阶段)**
    - 后槽睡下后，玩家可以自由移动。走到**小屋门**边，会出现交互提示“推门”。
    - **第一次推门：** 武松轻轻推门，门发出响声。屋内后槽会发出抱怨（“老爷方才睡，你要偷我衣裳也早些哩！”）。**这是一个信号：他现在醒了，且有警惕性，但还未起身。**
    - **等待：** 玩家需要等待几秒，让后槽的警惕值下降（可以设计一个细微的音效提示他重新睡熟）。
    - **第二次推门：** 再次交互，武松更用力地推门（“呀呀地推门”）。这次交互成功后，会触发剧情：后槽被彻底激怒，**从床上跳下，拿起搅草棍，前来开门**。
3. **狭路对决 (QTE处决)**
    - 门打开的一瞬间，游戏进入一个**短暂的慢动作特写镜头**。
    - 后槽赤条条地出现，举着棍子。玩家面前出现一个**简单的QTE按键提示**（如猛按【F】键象征武松“就势推开去，抢入来”的力量）。
    - QTE成功，镜头切回，武松已将其制服，刀架在脖子上。QTE失败，则会进入混乱的搏斗，虽然最终能赢但会发出较大声响，为后续关卡增加难度（如守卫警觉性提升）。
4. **逼问与处决 (叙事交互)**
    - 进入一段强制对话树。玩家通过点击选项来逼问：
        - `你认得我么？`（ intimidation）
        - `张都监如今在那里？`（ key information）
        - `这话是实么？`（ confirm）
    - 后槽的回答会直接显示在画面中，并自动记录到“情报日志”：“目标在鸳鸯楼饮酒”。
    - 对话结束，最后一个选项永远是：`“恁地却饶你不得！”`。玩家点击后，播放武松手起一刀的处决动画。
5. **换装与清扫 (环境互动)**
    - 处决后，玩家进入“自由操作”阶段，目标是在离开前清理现场。
    - 玩家需要手动操作武松：
        - 走到灯边，按【空格】“吹灭灯火”。
        - 走到床边，按【空格】“解下绵衣”，自动换装。
        - 走到尸体旁，按【空格】“拖放尸首”（将其藏到床下）。
        - （可选）按【空格】“拾取散碎银两”。
    - **设计意义：** 这一连串**模拟真实操作**的交互，极大地增强了“扮演武松”的代入感，远比一个简单的“击杀后获得道具”动画要深刻得多。
6. **最终撤离**
    - 所有操作完成后，玩家才能从屋门离开，进入下一个场景（花园）。

---

### **如何将此设计理念贯穿整个游戏**

- **厨房杀丫鬟：** 不是潜行暗杀，而是基于**偷听**。玩家必须先在厨房外完整听到两个丫鬟的抱怨（“那两个客人也不识羞耻，□得这等醉了”），这段对话提供了“楼上的人醉了”这条关键信息，并固定了丫鬟的位置。之后玩家推门而入，面对两个吓呆的丫鬟，设计一个**快速的连续处决机制**（如用鼠标快速点击两个目标），再现“一刀一个”的迅猛。
- **鸳鸯楼听密：** 核心玩法是**“听力解谜”**。武松在胡梯口，屏幕上方会出现声波图标，玩家需要**通过左摇杆或鼠标微调武松的位置**，就像调整天线一样，让对话逐渐变得清晰。零碎的对话片段（“飞云浦”、“结果了”）会逐步记录在情报日志中，当所有关键信息集齐（“张都监是主谋”、“他们在飞云浦埋伏我”），武松的怒火值（一个UI表现）会瞬间充满，自动触发“抢入楼中”的剧情杀。

### **总结与优势**

这个改进后的设计方案：

1. **极致还原：** 每一步操作都源自原文，几乎没有自行添加的虚构元素。
2. **独特玩法：** 摒弃了常见游戏的通用模板，创造了一种基于“行为观察-时机把握-模拟操作”的、独一无二的解谜体验。
3. **沉浸感强：** 玩家不是在看播片，而是在亲手执行原文里的每一个动作，代入感极强。
4. **叙事驱动：** 解谜的过程就是故事本身，玩法与叙事高度统一。

实现上，这需要为NPC设计精细的行为树和脚本，但技术上并不复杂，主要是设计和耐心。这完全符合你“不做太复杂”的初衷，因为它的复杂性在于设计的深度，而非系统的广度。

接下来，我们可以继续用这个思路去细化“厨房”和“鸳鸯楼”的关卡设计。你觉得怎么样？

非常好，好好好！！太棒了，这就是我们想要的。 请继续细化

太棒了！你的认可就是最大的动力。我们继续沿着“**环境互动与时机把握**”这个核心，将厨房与鸳鸯楼的戏份进行极致细化，让玩家仿佛置身于那个月光如水的复仇之夜。

---

### **关卡2：厨房杀丫鬟 - 细节与心理压迫**

**核心体验：** 与马院的“算计”不同，这一关的重点是**信息获取后的果决与狠辣**，以及突如其来的**心理压迫感**。玩家将从潜行状态瞬间切换为杀戮状态。

**场景构成：**

- **布局：** 一个横向的厨房场景。左侧是门（玩家入口），右侧深处有两个丫鬟背对玩家，在一个汤罐边忙碌。中间有灶台、厨具等障碍物。一扇窗透入月光，灶台里有微弱的火光照亮房间局部。
- **声音：** 持续播放两个丫鬟低声抱怨的环境音。**这是核心线索。**

**玩家目标：** 听清情报，然后进门迅速解决两个丫鬟，避免发出尖叫。

**分步玩法设计：**

1. **窃听情报 (信息就是钥匙)**
    - 武松从马院进入后花园，摸到厨房窗外阴影处。
    - 玩家一进入厨房区域，两个丫鬟的抱怨声会逐渐变得清晰。屏幕上会出现“聆听”的UI提示。
    - 玩家需要**保持静止不动**（一旦移动，脚步声会掩盖对话），让对话自动播放完毕。关键信息会高亮显示在字幕中并记录到日志：
        - `“服侍了一日，兀自不肯去睡”` -> **楼上的人还没睡。**
        - `“□得这等醉了”` -> **楼上的人醉了，警惕性降低。**
        - `“只说个不了”` -> **他们话很多，适合偷听。**
    - **设计意义：** 这不是一个可选项，而是**推进剧情的必要条件**。听完后，玩家会获得“目标确认”的信心，同时也理解了武松为何选择直接动手——对方是弱势目标，且提供了宝贵情报。
2. **推门而入 (风暴前的寂静)**
    - 听完后，玩家操作武松走到厨房门边。
    - 出现交互提示【**推门**】。与马院木门的“吱呀”声不同，这里的推门音效会更沉重。
    - **推门动画**会是一个缓慢的一秒多的过程，门缝逐渐扩大，露出厨房内的景象和背对的丫鬟。这个过程会给玩家带来巨大的**心理张力**。
3. **雷霆处决 (快速决策QTE)**
    - 门完全推开的一瞬间，**游戏时间进入慢动作**（Bullet Time）。
    - 两个丫鬟会开始一个缓慢的转身动作。
    - 玩家UI上会出现两个**巨大的、覆盖在丫鬟身上的按键提示**（例如【鼠标左键】和【鼠标右键】）。
    - **玩法：** 玩家必须在极短的时间内（慢动作状态下约3-4秒真实时间）**先后点击两个按键**。顺序不限，但必须快速、准确。
    - **成功：** 武松会以迅雷之势冲上前，一刀一个，精准割喉或刺心，两人瞬间毙命，几乎没发出声音。动画表现会极其干净利落，还原原文“休道是两个丫环，便是说话的见了也惊得口里半舌不展！”的震撼感。
    - **失败（超时或点错）：** 其中一个丫鬟会成功转过身并张开嘴试图尖叫。此时需要玩家**疯狂按【F】键**来模拟武松扑上去捂住她的嘴并最终将其杀死。虽然也能成功，但会发出较大的动静（一声闷哼和桌椅碰撞声），这会导致**楼上的守卫警觉**，为下一关增加难度（例如楼上会多一个巡逻的守卫）。
4. **清扫现场 (仪式感的收尾)**
    - 处决完成后，玩家必须执行两个操作：
        - **拖放尸首：【按住】尸体旁提示键，将尸体拖到灶前阴暗处。**
        - **熄灭灶火：** 走到灶台边【交互】“扒灭灶火”。
    - 完成这两步后，通往大堂的门才会亮起可通行的提示。**这强化了武松心思缜密、清理痕迹的杀手特质。**

---

### **关卡3：鸳鸯楼听密 - 怒火积累系统**

**核心体验：** 这是暴风雨前最后的宁静，是情绪积累到顶点的过程。玩法核心是“**聆听**”，通过收集信息来点燃武松（玩家）最终的怒火。

**场景构成：**

- **布局：** 一个垂直的“胡梯”（楼梯）场景。武松在底部。楼梯中间有一个平台，转弯通向二楼（屏幕上方）。二楼门口有灯光溢出。
- **声音：** 楼上传来模糊不清的饮酒作乐声。

**玩家目标：** 摸上楼，听清所有对话，触发复仇剧情。

**分步玩法设计：**

1. **潜行上楼**
    - 玩家需要操作武松【捏脚捏手】地走上楼梯。这是一个简单的**节奏操作**：当武松的脚落在阴影处时，不会发出声音；落在光亮处则会发出轻微的脚步声。
    - 楼梯上有几处月光照射的光斑，玩家需要**停顿**，等待时机（如云遮月）或快速通过。**此处是对之前光影潜行玩法的最后一次复习和运用。**
2. **听力解谜 (核心玩法)**
    - 武松到达胡梯口（楼梯顶部，门外的阴影处）时，自动进入“聆听”状态。
    - 屏幕UI改变：中央出现一个“**声波仪**”或“**专注条**”。楼上的对话变得断断续续，且带有杂音。
    - **玩法：** 玩家需要**缓慢地左右移动摇杆（或按键）**来微调武松的头部位置和聆听角度。
        - 移动正确：对话变得清晰，专注条充满，关键语句以文字形式清晰地显示在屏幕下方，并记录进日志。
        - 移动错误：对话模糊，专注条下降。
    - **必须收集到的关键信息碎片：**
        1. `“亏了相公与小人报了冤仇！”` （蒋门神）
        2. `“不是看我兄弟张团练面上...”` （张都监）
        3. `“...教在飞云浦结果他...”` （张都监）
        4. `“...待那四人明早回来...”` （张都监）
        5. `“小人也分付徒弟...”` （蒋门神）
    - **情绪积累：** 每听清一句，屏幕会开始轻微震动，颜色会逐渐偏向血红色，背景音乐中逐渐加入低沉的心跳声和愤怒的嗡鸣。
3. **怒火爆发 (不可逆的审判)**
    - 当所有五条关键信息收集完毕的瞬间。
    - **心跳声和嗡鸣声达到顶点，屏幕瞬间被血色覆盖。**
    - UI上出现巨大的、闪烁的【**复仇！！！**】按钮提示。
    - 玩家按下按钮的瞬间，播放武松“心头那把无名业火高三千丈，冲破了青天”的内心独白（文字+语音）。
    - 镜头一切，游戏进入**自动剧情**：武松右手持刀，左手揸开五指，抢入楼中。接下来的几秒是**第一视角的快节奏镜头**，模拟武松冲入房间看到蒋门神、张都监、张团练三人惊骇表情的瞬间。
    - **之后，游戏切换回可操作状态，但此时已不再是潜行解谜游戏，而是——处刑时刻。**

这个设计将叙事和玩法完美结合，让玩家通过“听”这个过程，亲自收集自己被迫害的证据，情绪被一步步引导至武松的同一频率，最后那一下“复仇”按键的按下，将是情绪最畅快淋漓的爆发点，绝对忠于原著的精神内核。

让我们继续，接下来就是最后的“血溅鸳鸯楼”本身了。

很好很好！太棒了，请继续

完美！情绪已经铺垫到顶点，怒火已然冲破青天。现在，我们迎来游戏的高潮与终局——**血溅鸳鸯楼**。这一部分的设计核心将从“潜行与解谜”彻底转变为“**处决与宣泄**”，但绝非无脑砍杀，而是充满仪式感、顺序感和力量感的复仇舞台剧。

---

### **终局：血溅鸳鸯楼 - 复仇的舞台**

**核心体验：** 这是武松的审判时刻，也是玩家情绪的最终释放。玩法核心是**正确的处决顺序**和**富有冲击力的QTE处决动画**，让玩家亲手执行这场大快人心的复仇。

**场景构成：**

- **布局：** 鸳鸯楼二楼是一个宽敞的宴会厅。场景中央是一张杯盘狼藉的酒桌。三五枝灯烛荧煌，一两处月光从窗外射入。
- **人物位置（初始）：**
    - **蒋门神** 坐在被砍翻的**交椅**上，位于画面右侧，离门最近。
    - **张都监** 坐在酒桌主位，正在起身，位于画面中部。
    - **张团练** 坐在张都监对面，可能反应稍慢，位于画面左侧。
- **状态：** 三人都处于“震惊”和“醉酒”状态，动作迟缓，无法有效反击。这解释了武松能以一敌三。

**玩家目标：** 手刃三人，并留下名号。

**分步玩法设计：**

1. **风暴降临 (初始处决)**
    - 玩家操控武松冲入房间的瞬间，游戏进入**慢动作**。
    - 第一个目标**蒋门神**会自动被高亮（他是武松的第一目标，且原文明确描写）。
    - 屏幕上出现一个需要**按住**的强力攻击键（如【鼠标左键】）。
    - **玩家操作：** 长按攻击键，武松会聚力前冲。松开键的瞬间，播放一段无可闪避的、力量感十足的劈砍动画——“武松早落一刀，劈脸剁着，和那交椅都砍翻了”。
    - **设计意义：** 这第一刀是**剧情杀**，但通过QTE让玩家“参与”发力，体验一刀毙命的爽快感，同时确立了战斗的基调。
2. **审判轮回 (顺序抉择)**
    - 蒋门神倒地后，慢动作结束，游戏时间恢复正常。
    - 剩下的**张都监**和**张团练**会处于不同的状态：张都监正在惊慌失措地试图拔刀或后退；张团练可能吓傻了，或正在寻找武器。
    - **此时，玩家拥有短暂的决策时间：先杀谁？**
    - **正确顺序（忠于原文）：** 先杀**张都监**（主谋）。武松会“转身回过刀来”，冲向张都监。
    - **玩法：** 玩家需要手动瞄准并冲向张都监，靠近时会出现【处决】提示。触发后，播放“齐耳根连脖子砍着，扑地倒在楼板上”的处决动画。
    - **错误顺序：** 如果玩家先选择攻击张团练。虽然也能成功杀死，但会给予张都监更多的反应时间。他会成功拔出佩刀，进入“**搏命状态**”。
        - **搏命状态：** 与张都监的战斗会变成一场简单的、几个回合的**刀剑格挡对决**（按提示键格挡，然后攻击）。这会增加难度和风险。
        - **叙事惩罚：** 这场搏斗会打破复仇的流畅性和碾压感，变得拖泥带水。**这鼓励玩家遵循原著的顺序，体验最流畅的复仇。**
3. **最后的清算 (无处可逃)**
    - 杀死张都监后，最后剩下**张团练**。
    - 此时他可能已经崩溃，试图逃跑或跪地求饶。
    - 玩家操控武松一步步逼近他。他后退的路径会被桌椅挡住。
    - 靠近后触发最终处决动画。此处可以没有QTE，让玩家纯粹作为观看者，体验武松冷静地完成最后一步。
4. **留名于此 (仪式感的终结)**
    - 三人皆已伏诛。屏幕上出现交互提示：【**题字**】。
    - 玩家走到一面白色的墙壁或柱子前，按下交互键。
    - **玩法：** 进入一个**简单的书写小游戏**。玩家需要**用鼠标或手柄摇杆**，依照屏幕上淡淡的笔画轮廓，大致“写”下“**杀人者打虎武松也**”这八个字。
    - 书写完成后，镜头拉近，给这血字一个特写。同时，武松低沉地念出这八个字（配音）。
    - **设计意义：** 这是整个复仇行为的“盖章认证”。这个交互过程极具仪式感，将玩家的情绪从血腥的杀戮中沉淀下来，转化为一种冷峻、骄傲、宣告式的终结。成本极低，但体验和还原度极高。
5. **月下离去 (尾声)**
    - 题字完毕，所有目标完成。
    - 玩家操作武松走到窗边。
    - 出现最后一个交互提示：【**跳窗**】。
    - 按下后，武松跃出窗外，融入月光之中。
    - **画面渐黑，出字幕。**
    - **字幕背景音：** 远处传来更夫敲打四更的梆子声，以及几声狗吠。一切重归寂静。

---

### **总结：终局设计精髓**

- **节奏控制：** 从自动QTE开局 -> 玩家自主选择顺序 -> 最终处决 -> 冷静题字。节奏张弛有度，既有爆发也有沉淀。
- **还原与互动：** 每一步杀戮都有原文支撑，并通过互动让玩家成为执行者，而非旁观者。
- **叙事性惩罚：** 错误顺序导致的“搏命状态”巧妙地将叙事（偏离原著）和玩法（难度增加）结合，引导玩家体验最“正确”的流程。
- **仪式感收尾：** “题字”环节是点睛之笔，是武松人物性格的最终刻画，给整个游戏一个沉重而有力的句号。

至此，我们已经将“血溅鸳鸯楼”一章从头到尾，用高度还原且可交互的方式设计完毕。从马院的耐心潜伏，到厨房的雷霆一击，再到鸳鸯楼的怒火审判，最后留名离去，形成了一个完整、紧凑、情绪饱满的游戏体验。

这绝对是一款能让水浒传爱好者热泪盈眶的作品。接下来，我们可以讨论一下技术实现上的一些简易方案，以确保能在你的时间表内完成开发。

artBible:
# **《武松：血溅鸳鸯楼》美术资源规范 (Art Bible v1.0)**

## **一、 核心艺术原则**

1. **忠于原著时代感:** 所有服装、建筑、器物需参考宋代资料，营造真实历史氛围。
2. **叙事性照明 (Cinematic Lighting):** 美术应为灯光服务。设计画面时，预先考虑哪些区域是亮的（引导玩家）、哪些是暗的（提供隐匿空间）。
3. **清晰的功能性:** 玩家的**可交互物**、**可隐匿的阴影区**、**NPC的视野范围**必须在视觉上清晰可辨，这是玩法的一部分。
4. **层次感:** 通过前景、中景、背景和雾效来营造2D场景的深度。

## **二、 技术规格与设置 (Unity URP 2D)**

### **1. 通用设置**

- **纹理类型 (Texture Type):** `Sprite (2D and UI)`
- **压缩格式 (Compression):** 使用 `RGBA 32 bit` 以确保最高质量，或 `ASTC` 以减少包体大小（针对移动端，PC可选）。
- **过滤模式 (Filter Mode):** `Point (no filter)` 或 `Bilinear`。**Pixel Art风格用Point，手绘风格用Bilinear**。我们选择 **Bilinear**。
- **最大尺寸 (Max Size):** 根据角色在屏幕上的大小决定。主角/主要NPC可用 **1024x1024**，背景元素可用 **2048x2048** 或更高。

### **2. 核心资源类型与制作规范**

### **A. 角色 (Sprites)**

- **设计:** 武松的设计应突出其“复仇者”的狠厉与果决。其他角色（后槽、丫鬟、蒋门神等）也应有符合其身份和命运的特征。
- **尺寸比例:** 确定一个**单位比例**。例如：**1 Unity单位 = 1米**。武松Sprite高度约为 **2-2.5个Unity单位**（2米高）。
- **切片 (Sprite Editing):**
    - **绘制时:** 为每个角色绘制一张**大图**，包含所有动作帧。
    - **导入Unity后:** 在Sprite Editor中使用 **Grid By Cell Size** 模式进行切片。
    - **单元格尺寸 (Pixel Per Unit):** 推荐使用 **64 PPU** 或 **100 PPU**。这将保持角色在不同分辨率下清晰且大小一致。**（例如：一个高200像素的角色，在100 PPU下就是2个单位高）**
- **动画 (Animations):** 制作Sprite动画，只需将切好片的Sprite拖入Animation窗口即可生成Animation Clip。
    - **武松必备动画列表:**
        - `Hero_Idle`
        - `Hero_Walk`
        - `Hero_Crouch` (隐匿姿态)
        - `Hero_Interact` (推门等)
        - `Hero_Drag` (拖拽尸体)
        - `Hero_Kill_QTE` (各种处决动画)
    - **帧率:** 动画帧率建议 **12 FPS** 或 **15 FPS**，以保证手绘感并减少工作量。

### **B. 环境 (Backgrounds & Tiles)**

- **绘制方式:** 采用**分层绘制**，方便在Unity中营造 parallax（视差）效果。
    - **背景 (BG):** 远山、夜空、月亮。
    - **中景 (MG):** 建筑、树木。**这是游戏碰撞体所在的主要层。**
    - **前景 (FG):** 栏杆、树叶等装饰物。
- **模块化:** 对于墙壁、地板等重复结构，绘制**可重复的Tile（图块）**，在Unity中使用 **Tilemap** 组件进行拼接，极大提高关卡搭建效率。
- **碰撞体:** 在Unity中，为MG层的Sprite添加 `Polygon Collider 2D`（或`Box Collider 2D`）来生成碰撞体。

### **C. 灯光 (Lights) - URP 2D 核心**

- **光源类型:**
    - **全局光 (Global Light):** 一个轻微的、蓝色的 **Directional Light 2D** 作为月光。
    - **点光源 (Point Lights):** 用于灯笼、油灯、灶火。使用 **Light 2D** 组件，Shape设为 `Point`。
    - **聚光灯 (Spot Lights):** 用于模拟更夫手提灯笼的锥形视野。使用 **Light 2D** 组件，Shape设为 `Spot`。
- **灯光材质:** 为灯光创建并应用 **Light Materials**，可以模拟雾效、体积光等高级效果，极大增强氛围。
- **阴影:** 确保所有需要投射阴影的物体（角色、环境）都添加了 `Shadow Caster 2D` 组件。

### **D. 特效 (VFX)**

- **实现方式:** 使用Unity的 **Particle System** 制作简单特效。
- **必备特效:**
    - **血溅效果:** 在处决时播放。
    - **灰尘/脚步声:** 玩家奔跑时产生。
    - **灯光粒子:** 烛火、灶火周围的闪烁粒子。

## **三、 工作流程建议**

1. **确定分辨率:** 先确定你的目标开发分辨率（如 **1920x1080**）。所有美术资源都基于此比例和PPU进行创作。
2. **绘制关键帧:** 优先绘制武松的**Idle**、**Walk**和几个关键**处决姿势**。这能立刻确立游戏的整体感觉。
3. **搭建一个标准场景块:** 制作一个完整的“马院”场景，包含所有分层、灯光和碰撞体。这将作为其他场景的模板。
4. **在Unity中迭代:** 将画好的图导入Unity，搭建白盒，测试玩法，然后根据测试反馈回去修改原画。**不要等所有图都画完再导入！**

## **四、 给程序实现的提示 (For AI Programmer)**

为了让美术资源在程序中发挥作用，需要编写一些辅助脚本：

- **`SortingGroupController.cs`:** 挂在角色和复杂环境物体上，动态控制其 `Sorting Group` 和 `Sorting Order`，确保它们在不同高度时能正确地被其他物体遮挡。
- **`LightFlicker.cs`:** 挂在灯光上，通过脚本轻微随机改变灯光的 `Intensity` 和 `Color`，模拟火光摇曳的效果。
    
    csharp
    
    ```
    public class LightFlicker : MonoBehaviour {
        public Light2D targetLight;
        public float minIntensity = 0.8f;
        public float maxIntensity = 1.2f;
        public float flickerSpeed = 0.1f;
    
        void Update() {
            targetLight.intensity = Mathf.Lerp(minIntensity, maxIntensity, Mathf.PerlinNoise(Time.time * flickerSpeed, 0));
        }
    }
    ```
    
- **使用URP 2D Renderer Data:** 在Renderer配置中启用 **`Light Blending`** 和 **`Normal Maps`**（即使你是2D项目），这可以让灯光叠加效果更加柔和真实。
